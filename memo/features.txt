===================================================================
application_core.py の feature_extraction メソッドについて
===================================================================

● feature dataの場所
{'mel': '/store/projects/ml/mathG/DCASE2017/baseline/DCASE2017-baseline-system/applications/system/task2/feature_extractor/dataset_c17f65145b5c15a1a0afc148dc881423/feature_extractor_57a55966f25a1b3722bd922a63c75875/sequence_mixture_devtest_babycry_000_c02f92b79f2bbefa98d008f3c2d9b704.cpickle'}

● feature extraction方法 ------
feature_extractor.extract で実行
　パラメータは、

● feature dataの取り出し方 -----
        feature_repository = feature_extractor.extract(
            audio_file=app.dataset.relative_to_absolute_path(audio_filename),
            extractor_params=DottedDict(app.params.get_path('feature_extractor.parameters')),
            storage_paths=current_feature_files
        )
として
 feature_repository['mel']['feat']
とか

● feature の保存場所 -----
/store/projects/ml/mathG/DCASE2017/baseline/DCASE2017-baseline-system/applications/system/task2/feature_extractor/dataset_c17f65145b5c15a1a0afc148dc881423/feature_extractor_57a55966f25a1b3722bd922a63c75875

●　パラメータの確認 --------
DottedDict(app.params.get_path('feature_extractor.parameters'))
{'mel': {'mono': True,
  'window': 'hamming_asymmetric',
  'spectrogram_type': 'magnitude',
  'n_mels': 40,
  'normalize_mel_bands': False,
  'n_fft': 2048,
  'fmin': 0,
  'fmax': 22050,
  'htk': False,
  'log': True,
  'method': 'mel',
  'fs': 44100,
  'win_length_seconds': 0.04,
  'win_length_samples': 1764,
  'hop_length_seconds': 0.02,
  'hop_length_samples': 882,
  '_hash': '57a55966f25a1b3722bd922a63c75875'}}

===================================================================
application_core.py の feature_normalization メソッドについて
===================================================================
各ターゲットラベルごとに feature_extraction のデータを集計して、周波数ごとの統計値

N: 750500 はどこから → データ数は　1501(時間ステップ)*500(イベントデータがある数)

normalizer (event_label=gunshot)
{'N': [750500],
 'S1': [array([-3436332.2, -4170437. , -4619305. , -4907282. , -5114026.5,
         -5267653. , -5392129. , -5468818.5, -5524138. , -5564245.5,
         -5595133. , -5651086. , -5726526.5, -5817649.5, -5890037.5,
         -5954377.5, -6002050. , -6064783. , -6158742. , -6316203.5,
         -6498878. , -6584447. , -6576032. , -6580102. , -6631369.5,
         -6710245. , -6840940.5, -7058393. , -7320852. , -7619120. ,
         -7877817. , -7921588.5, -8029673.5, -8195197. , -8343366.5,
         -8429713. , -8505989. , -8583106. , -8692211. , -8875876. ],
        dtype=float32)],
 'S2': [array([1.73204980e+07, 2.46571480e+07, 2.96505760e+07, 3.32841920e+07,
         3.60549000e+07, 3.82183920e+07, 3.99464520e+07, 4.10560000e+07,
         4.19012520e+07, 4.25399320e+07, 4.30193360e+07, 4.38062200e+07,
         4.49383560e+07, 4.63161800e+07, 4.74497840e+07, 4.84501640e+07,
         4.91914840e+07, 5.02177120e+07, 5.17844560e+07, 5.43741800e+07,
         5.74363840e+07, 5.89140920e+07, 5.87669400e+07, 5.88510560e+07,
         5.97504160e+07, 6.11326480e+07, 6.34783280e+07, 6.74438160e+07,
         7.23770640e+07, 7.81858960e+07, 8.34703680e+07, 8.44136240e+07,
         8.66660480e+07, 9.01694800e+07, 9.33647600e+07, 9.52631120e+07,
         9.69298320e+07, 9.86348160e+07, 1.01081312e+08, 1.05447704e+08],
        dtype=float32)],
 'mean': [array([[ -4.57872385,  -5.55687808,  -6.15497002,  -6.53868354,
           -6.81415923,  -7.01885809,  -7.18471552,  -7.28690007,
           -7.36061026,  -7.4140513 ,  -7.4552072 ,  -7.52976149,
           -7.63028181,  -7.7516982 ,  -7.84815123,  -7.93388075,
           -7.99740173,  -8.08099001,  -8.20618521,  -8.415994  ,
           -8.65939773,  -8.77341372,  -8.7622012 ,  -8.76762425,
           -8.83593538,  -8.94103264,  -9.11517722,  -9.40492072,
           -9.75463291, -10.15205863, -10.49675816, -10.55508128,
          -10.6990986 , -10.91964957, -11.11707728, -11.23212925,
          -11.33376282, -11.43651699, -11.5818934 , -11.82661692]])],
 'std': [array([[1.45392657, 1.4054905 , 1.27440554, 1.26292401, 1.26822986,
          1.28823081, 1.26740502, 1.26726227, 1.28550884, 1.3091859 ,
          1.31938952, 1.29308777, 1.28712564, 1.27473247, 1.27700965,
          1.26914127, 1.25956975, 1.26883589, 1.28781593, 1.27344012,
          1.24324392, 1.2357189 , 1.23594073, 1.24280572, 1.24112482,
          1.23037783, 1.22267302, 1.18854782, 1.13384126, 1.0555186 ,
          1.01869936, 1.0328473 , 1.00351335, 0.95243295, 0.90222215,
          0.87871531, 0.83635357, 0.79469833, 0.73826805, 0.79649292]])]}

を作成。

'S1': numpy.sum(channel_data, axis=0),
'S2': numpy.sum(channel_data ** 2, axis=0),
らしい axis は時間方向だな


■ FeatureNormalizer



■ FeatureStacker



■ FeatureAggregator




